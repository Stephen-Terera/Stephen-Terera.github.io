{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __read, __spreadArray } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { normalizeKey } from '@material/dom/keyboard';\nimport { cssClasses, numbers, strings } from './constants';\nimport { preventDefaultEvent } from './events';\nimport * as typeahead from './typeahead';\nfunction isNumberArray(selectedIndex) {\n  return selectedIndex instanceof Array;\n}\n/** List of modifier keys to consider while handling keyboard events. */\nvar handledModifierKeys = ['Alt', 'Control', 'Meta', 'Shift'];\n/** Checks if the event has the given modifier keys. */\nfunction createModifierChecker(event) {\n  var eventModifiers = new Set(event ? handledModifierKeys.filter(function (m) {\n    return event.getModifierState(m);\n  }) : []);\n  return function (modifiers) {\n    return modifiers.every(function (m) {\n      return eventModifiers.has(m);\n    }) && modifiers.length === eventModifiers.size;\n  };\n}\nvar MDCListFoundation = /** @class */function (_super) {\n  __extends(MDCListFoundation, _super);\n  function MDCListFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;\n    _this.wrapFocus = false;\n    _this.isVertical = true;\n    _this.isSingleSelectionList = false;\n    _this.areDisabledItemsFocusable = true;\n    _this.selectedIndex = numbers.UNSET_INDEX;\n    _this.focusedItemIndex = numbers.UNSET_INDEX;\n    _this.useActivatedClass = false;\n    _this.useSelectedAttr = false;\n    _this.ariaCurrentAttrValue = null;\n    _this.isCheckboxList = false;\n    _this.isRadioList = false;\n    _this.lastSelectedIndex = null;\n    _this.hasTypeahead = false;\n    // Transiently holds current typeahead prefix from user.\n    _this.typeaheadState = typeahead.initState();\n    _this.sortedIndexByFirstChar = new Map();\n    return _this;\n  }\n  Object.defineProperty(MDCListFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClassForElementIndex: function () {\n          return undefined;\n        },\n        focusItemAtIndex: function () {\n          return undefined;\n        },\n        getAttributeForElementIndex: function () {\n          return null;\n        },\n        getFocusedElementIndex: function () {\n          return 0;\n        },\n        getListItemCount: function () {\n          return 0;\n        },\n        hasCheckboxAtIndex: function () {\n          return false;\n        },\n        hasRadioAtIndex: function () {\n          return false;\n        },\n        isCheckboxCheckedAtIndex: function () {\n          return false;\n        },\n        isFocusInsideList: function () {\n          return false;\n        },\n        isRootFocused: function () {\n          return false;\n        },\n        listItemAtIndexHasClass: function () {\n          return false;\n        },\n        notifyAction: function () {\n          return undefined;\n        },\n        notifySelectionChange: function () {},\n        removeClassForElementIndex: function () {\n          return undefined;\n        },\n        setAttributeForElementIndex: function () {\n          return undefined;\n        },\n        setCheckedCheckboxOrRadioAtIndex: function () {\n          return undefined;\n        },\n        setTabIndexForListItemChildren: function () {\n          return undefined;\n        },\n        getPrimaryTextAtIndex: function () {\n          return '';\n        }\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MDCListFoundation.prototype.layout = function () {\n    if (this.adapter.getListItemCount() === 0) {\n      return;\n    }\n    // TODO(b/172274142): consider all items when determining the list's type.\n    if (this.adapter.hasCheckboxAtIndex(0)) {\n      this.isCheckboxList = true;\n    } else if (this.adapter.hasRadioAtIndex(0)) {\n      this.isRadioList = true;\n    } else {\n      this.maybeInitializeSingleSelection();\n    }\n    if (this.hasTypeahead) {\n      this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n    }\n  };\n  /** Returns the index of the item that was last focused. */\n  MDCListFoundation.prototype.getFocusedItemIndex = function () {\n    return this.focusedItemIndex;\n  };\n  /** Toggles focus wrapping with keyboard navigation. */\n  MDCListFoundation.prototype.setWrapFocus = function (value) {\n    this.wrapFocus = value;\n  };\n  /**\n   * Toggles orientation direction for keyboard navigation (true for vertical,\n   * false for horizontal).\n   */\n  MDCListFoundation.prototype.setVerticalOrientation = function (value) {\n    this.isVertical = value;\n  };\n  /** Toggles single-selection behavior. */\n  MDCListFoundation.prototype.setSingleSelection = function (value) {\n    this.isSingleSelectionList = value;\n    if (value) {\n      this.maybeInitializeSingleSelection();\n      this.selectedIndex = this.getSelectedIndexFromDOM();\n    }\n  };\n  MDCListFoundation.prototype.setDisabledItemsFocusable = function (value) {\n    this.areDisabledItemsFocusable = value;\n  };\n  /**\n   * Automatically determines whether the list is single selection list. If so,\n   * initializes the internal state to match the selected item.\n   */\n  MDCListFoundation.prototype.maybeInitializeSingleSelection = function () {\n    var selectedItemIndex = this.getSelectedIndexFromDOM();\n    if (selectedItemIndex === numbers.UNSET_INDEX) return;\n    var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n    if (hasActivatedClass) {\n      this.setUseActivatedClass(true);\n    }\n    this.isSingleSelectionList = true;\n    this.selectedIndex = selectedItemIndex;\n  };\n  /** @return Index of the first selected item based on the DOM state. */\n  MDCListFoundation.prototype.getSelectedIndexFromDOM = function () {\n    var selectedIndex = numbers.UNSET_INDEX;\n    var listItemsCount = this.adapter.getListItemCount();\n    for (var i = 0; i < listItemsCount; i++) {\n      var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_SELECTED_CLASS);\n      var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n      if (!(hasSelectedClass || hasActivatedClass)) {\n        continue;\n      }\n      selectedIndex = i;\n      break;\n    }\n    return selectedIndex;\n  };\n  /**\n   * Sets whether typeahead is enabled on the list.\n   * @param hasTypeahead Whether typeahead is enabled.\n   */\n  MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {\n    this.hasTypeahead = hasTypeahead;\n    if (hasTypeahead) {\n      this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n    }\n  };\n  /**\n   * @return Whether typeahead is currently matching a user-specified prefix.\n   */\n  MDCListFoundation.prototype.isTypeaheadInProgress = function () {\n    return this.hasTypeahead && typeahead.isTypingInProgress(this.typeaheadState);\n  };\n  /** Toggle use of the \"activated\" CSS class. */\n  MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\n    this.useActivatedClass = useActivated;\n  };\n  /**\n   * Toggles use of the selected attribute (true for aria-selected, false for\n   * aria-checked).\n   */\n  MDCListFoundation.prototype.setUseSelectedAttribute = function (useSelected) {\n    this.useSelectedAttr = useSelected;\n  };\n  MDCListFoundation.prototype.getSelectedIndex = function () {\n    return this.selectedIndex;\n  };\n  MDCListFoundation.prototype.setSelectedIndex = function (index, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!this.isIndexValid(index)) {\n      return;\n    }\n    if (this.isCheckboxList) {\n      this.setCheckboxAtIndex(index, options);\n    } else if (this.isRadioList) {\n      this.setRadioAtIndex(index, options);\n    } else {\n      this.setSingleSelectionAtIndex(index, options);\n    }\n  };\n  /**\n   * Focus in handler for the list items.\n   */\n  MDCListFoundation.prototype.handleFocusIn = function (listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.focusedItemIndex = listItemIndex;\n      this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');\n      this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');\n    }\n  };\n  /**\n   * Focus out handler for the list items.\n   */\n  MDCListFoundation.prototype.handleFocusOut = function (listItemIndex) {\n    var _this = this;\n    if (listItemIndex >= 0) {\n      this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');\n      this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');\n    }\n    /**\n     * Between Focusout & Focusin some browsers do not have focus on any\n     * element. Setting a delay to wait till the focus is moved to next element.\n     */\n    setTimeout(function () {\n      if (!_this.adapter.isFocusInsideList()) {\n        _this.setTabindexToFirstSelectedOrFocusedItem();\n      }\n    }, 0);\n  };\n  MDCListFoundation.prototype.isIndexDisabled = function (index) {\n    return this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n  };\n  /**\n   * Key handler for the list.\n   */\n  MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {\n    var _this = this;\n    var _a;\n    var isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n    var isArrowUp = normalizeKey(event) === 'ArrowUp';\n    var isArrowRight = normalizeKey(event) === 'ArrowRight';\n    var isArrowDown = normalizeKey(event) === 'ArrowDown';\n    var isHome = normalizeKey(event) === 'Home';\n    var isEnd = normalizeKey(event) === 'End';\n    var isEnter = normalizeKey(event) === 'Enter';\n    var isSpace = normalizeKey(event) === 'Spacebar';\n    // The keys for forward and back differ based on list orientation.\n    var isForward = this.isVertical && isArrowDown || !this.isVertical && isArrowRight;\n    var isBack = this.isVertical && isArrowUp || !this.isVertical && isArrowLeft;\n    // Have to check both upper and lower case, because having caps lock on\n    // affects the value.\n    var isLetterA = event.key === 'A' || event.key === 'a';\n    var eventHasModifiers = createModifierChecker(event);\n    if (this.adapter.isRootFocused()) {\n      if ((isBack || isEnd) && eventHasModifiers([])) {\n        event.preventDefault();\n        this.focusLastElement();\n      } else if ((isForward || isHome) && eventHasModifiers([])) {\n        event.preventDefault();\n        this.focusFirstElement();\n      } else if (isBack && eventHasModifiers(['Shift']) && this.isCheckboxList) {\n        event.preventDefault();\n        var focusedIndex = this.focusLastElement();\n        if (focusedIndex !== -1) {\n          this.setSelectedIndexOnAction(focusedIndex, false);\n        }\n      } else if (isForward && eventHasModifiers(['Shift']) && this.isCheckboxList) {\n        event.preventDefault();\n        var focusedIndex = this.focusFirstElement();\n        if (focusedIndex !== -1) {\n          this.setSelectedIndexOnAction(focusedIndex, false);\n        }\n      }\n      if (this.hasTypeahead) {\n        var handleKeydownOpts = {\n          event: event,\n          focusItemAtIndex: function (index) {\n            _this.focusItemAtIndex(index);\n          },\n          focusedItemIndex: -1,\n          isTargetListItem: isRootListItem,\n          sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n          isItemAtIndexDisabled: function (index) {\n            return _this.isIndexDisabled(index);\n          }\n        };\n        typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n      }\n      return;\n    }\n    var currentIndex = this.adapter.getFocusedElementIndex();\n    if (currentIndex === -1) {\n      currentIndex = listItemIndex;\n      if (currentIndex < 0) {\n        // If this event doesn't have a mdc-list-item ancestor from the\n        // current list (not from a sublist), return early.\n        return;\n      }\n    }\n    if (isForward && eventHasModifiers([])) {\n      preventDefaultEvent(event);\n      this.focusNextElement(currentIndex);\n    } else if (isBack && eventHasModifiers([])) {\n      preventDefaultEvent(event);\n      this.focusPrevElement(currentIndex);\n    } else if (isForward && eventHasModifiers(['Shift']) && this.isCheckboxList) {\n      preventDefaultEvent(event);\n      var focusedIndex = this.focusNextElement(currentIndex);\n      if (focusedIndex !== -1) {\n        this.setSelectedIndexOnAction(focusedIndex, false);\n      }\n    } else if (isBack && eventHasModifiers(['Shift']) && this.isCheckboxList) {\n      preventDefaultEvent(event);\n      var focusedIndex = this.focusPrevElement(currentIndex);\n      if (focusedIndex !== -1) {\n        this.setSelectedIndexOnAction(focusedIndex, false);\n      }\n    } else if (isHome && eventHasModifiers([])) {\n      preventDefaultEvent(event);\n      this.focusFirstElement();\n    } else if (isEnd && eventHasModifiers([])) {\n      preventDefaultEvent(event);\n      this.focusLastElement();\n    } else if (isHome && eventHasModifiers(['Control', 'Shift']) && this.isCheckboxList) {\n      preventDefaultEvent(event);\n      if (this.isIndexDisabled(currentIndex)) {\n        return;\n      }\n      this.focusFirstElement();\n      this.toggleCheckboxRange(0, currentIndex, currentIndex);\n    } else if (isEnd && eventHasModifiers(['Control', 'Shift']) && this.isCheckboxList) {\n      preventDefaultEvent(event);\n      if (this.isIndexDisabled(currentIndex)) {\n        return;\n      }\n      this.focusLastElement();\n      this.toggleCheckboxRange(currentIndex, this.adapter.getListItemCount() - 1, currentIndex);\n    } else if (isLetterA && eventHasModifiers(['Control']) && this.isCheckboxList) {\n      event.preventDefault();\n      this.checkboxListToggleAll(this.selectedIndex === numbers.UNSET_INDEX ? [] : this.selectedIndex, true);\n    } else if ((isEnter || isSpace) && eventHasModifiers([])) {\n      if (isRootListItem) {\n        // Return early if enter key is pressed on anchor element which triggers\n        // synthetic MouseEvent event.\n        var target = event.target;\n        if (target && target.tagName === 'A' && isEnter) {\n          return;\n        }\n        preventDefaultEvent(event);\n        if (this.isIndexDisabled(currentIndex)) {\n          return;\n        }\n        if (!this.isTypeaheadInProgress()) {\n          if (this.isSelectableList()) {\n            this.setSelectedIndexOnAction(currentIndex, false);\n          }\n          this.adapter.notifyAction(currentIndex);\n        }\n      }\n    } else if ((isEnter || isSpace) && eventHasModifiers(['Shift']) && this.isCheckboxList) {\n      // Return early if enter key is pressed on anchor element which triggers\n      // synthetic MouseEvent event.\n      var target = event.target;\n      if (target && target.tagName === 'A' && isEnter) {\n        return;\n      }\n      preventDefaultEvent(event);\n      if (this.isIndexDisabled(currentIndex)) {\n        return;\n      }\n      if (!this.isTypeaheadInProgress()) {\n        this.toggleCheckboxRange((_a = this.lastSelectedIndex) !== null && _a !== void 0 ? _a : currentIndex, currentIndex, currentIndex);\n        this.adapter.notifyAction(currentIndex);\n      }\n    }\n    if (this.hasTypeahead) {\n      var handleKeydownOpts = {\n        event: event,\n        focusItemAtIndex: function (index) {\n          _this.focusItemAtIndex(index);\n        },\n        focusedItemIndex: this.focusedItemIndex,\n        isTargetListItem: isRootListItem,\n        sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n        isItemAtIndexDisabled: function (index) {\n          return _this.isIndexDisabled(index);\n        }\n      };\n      typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n    }\n  };\n  /**\n   * Click handler for the list.\n   *\n   * @param index Index for the item that has been clicked.\n   * @param isCheckboxAlreadyUpdatedInAdapter Whether the checkbox for\n   *   the list item has already been updated in the adapter. This attribute\n   *   should be set to `true` when e.g. the click event directly landed on\n   *   the underlying native checkbox element which would cause the checked\n   *   state to be already toggled within `adapter.isCheckboxCheckedAtIndex`.\n   */\n  MDCListFoundation.prototype.handleClick = function (index, isCheckboxAlreadyUpdatedInAdapter, event) {\n    var _a;\n    var eventHasModifiers = createModifierChecker(event);\n    if (index === numbers.UNSET_INDEX) {\n      return;\n    }\n    if (this.isIndexDisabled(index)) {\n      return;\n    }\n    if (eventHasModifiers([])) {\n      if (this.isSelectableList()) {\n        this.setSelectedIndexOnAction(index, isCheckboxAlreadyUpdatedInAdapter);\n      }\n      this.adapter.notifyAction(index);\n    } else if (this.isCheckboxList && eventHasModifiers(['Shift'])) {\n      this.toggleCheckboxRange((_a = this.lastSelectedIndex) !== null && _a !== void 0 ? _a : index, index, index);\n      this.adapter.notifyAction(index);\n    }\n  };\n  /**\n   * Focuses the next element on the list.\n   */\n  MDCListFoundation.prototype.focusNextElement = function (index) {\n    var count = this.adapter.getListItemCount();\n    var nextIndex = index;\n    var firstChecked = null;\n    do {\n      nextIndex++;\n      if (nextIndex >= count) {\n        if (this.wrapFocus) {\n          nextIndex = 0;\n        } else {\n          // Return early because last item is already focused.\n          return index;\n        }\n      }\n      if (nextIndex === firstChecked) {\n        return -1;\n      }\n      firstChecked = firstChecked !== null && firstChecked !== void 0 ? firstChecked : nextIndex;\n    } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(nextIndex));\n    this.focusItemAtIndex(nextIndex);\n    return nextIndex;\n  };\n  /**\n   * Focuses the previous element on the list.\n   */\n  MDCListFoundation.prototype.focusPrevElement = function (index) {\n    var count = this.adapter.getListItemCount();\n    var prevIndex = index;\n    var firstChecked = null;\n    do {\n      prevIndex--;\n      if (prevIndex < 0) {\n        if (this.wrapFocus) {\n          prevIndex = count - 1;\n        } else {\n          // Return early because first item is already focused.\n          return index;\n        }\n      }\n      if (prevIndex === firstChecked) {\n        return -1;\n      }\n      firstChecked = firstChecked !== null && firstChecked !== void 0 ? firstChecked : prevIndex;\n    } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(prevIndex));\n    this.focusItemAtIndex(prevIndex);\n    return prevIndex;\n  };\n  MDCListFoundation.prototype.focusFirstElement = function () {\n    // Pass -1 to `focusNextElement`, since it will incremement to 0 and focus\n    // the first element.\n    return this.focusNextElement(-1);\n  };\n  MDCListFoundation.prototype.focusLastElement = function () {\n    // Pass the length of the list to `focusNextElement` since it will decrement\n    // to length - 1 and focus the last element.\n    return this.focusPrevElement(this.adapter.getListItemCount());\n  };\n  MDCListFoundation.prototype.focusInitialElement = function () {\n    var initialIndex = this.getFirstSelectedOrFocusedItemIndex();\n    this.focusItemAtIndex(initialIndex);\n    return initialIndex;\n  };\n  /**\n   * @param itemIndex Index of the list item\n   * @param isEnabled Sets the list item to enabled or disabled.\n   */\n  MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\n    if (!this.isIndexValid(itemIndex, false)) {\n      return;\n    }\n    if (isEnabled) {\n      this.adapter.removeClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'false');\n    } else {\n      this.adapter.addClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'true');\n    }\n  };\n  MDCListFoundation.prototype.setSingleSelectionAtIndex = function (index, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (this.selectedIndex === index && !options.forceUpdate) {\n      return;\n    }\n    var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n    if (this.useActivatedClass) {\n      selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n    }\n    if (this.selectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);\n    }\n    this.setAriaForSingleSelectionAtIndex(index);\n    this.setTabindexAtIndex(index);\n    if (index !== numbers.UNSET_INDEX) {\n      this.adapter.addClassForElementIndex(index, selectedClassName);\n    }\n    this.selectedIndex = index;\n    // If the selected value has changed through user interaction,\n    // we want to notify the selection change to the adapter.\n    if (options.isUserInteraction && !options.forceUpdate) {\n      this.adapter.notifySelectionChange([index]);\n    }\n  };\n  /**\n   * Sets aria attribute for single selection at given index.\n   */\n  MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex = function (index) {\n    // Detect the presence of aria-current and get the value only during list\n    // initialization when it is in unset state.\n    if (this.selectedIndex === numbers.UNSET_INDEX) {\n      this.ariaCurrentAttrValue = this.adapter.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n    }\n    var isAriaCurrent = this.ariaCurrentAttrValue !== null;\n    var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n    if (this.selectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, 'false');\n    }\n    if (index !== numbers.UNSET_INDEX) {\n      var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : 'true';\n      this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n    }\n  };\n  /**\n   * Returns the attribute to use for indicating selection status.\n   */\n  MDCListFoundation.prototype.getSelectionAttribute = function () {\n    return this.useSelectedAttr ? strings.ARIA_SELECTED : strings.ARIA_CHECKED;\n  };\n  /**\n   * Toggles radio at give index. Radio doesn't change the checked state if it\n   * is already checked.\n   */\n  MDCListFoundation.prototype.setRadioAtIndex = function (index, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var selectionAttribute = this.getSelectionAttribute();\n    this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);\n    if (this.selectedIndex === index && !options.forceUpdate) {\n      return;\n    }\n    if (this.selectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, 'false');\n    }\n    this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');\n    this.selectedIndex = index;\n    // If the selected value has changed through user interaction,\n    // we want to notify the selection change to the adapter.\n    if (options.isUserInteraction && !options.forceUpdate) {\n      this.adapter.notifySelectionChange([index]);\n    }\n  };\n  MDCListFoundation.prototype.setCheckboxAtIndex = function (index, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var currentIndex = this.selectedIndex;\n    // If this update is not triggered by a user interaction, we do not\n    // need to know about the currently selected indices and can avoid\n    // constructing the `Set` for performance reasons.\n    var currentlySelected = options.isUserInteraction ? new Set(currentIndex === numbers.UNSET_INDEX ? [] : currentIndex) : null;\n    var selectionAttribute = this.getSelectionAttribute();\n    var changedIndices = [];\n    for (var i = 0; i < this.adapter.getListItemCount(); i++) {\n      var previousIsChecked = currentlySelected === null || currentlySelected === void 0 ? void 0 : currentlySelected.has(i);\n      var newIsChecked = index.indexOf(i) >= 0;\n      // If the selection has changed for this item, we keep track of it\n      // so that we can notify the adapter.\n      if (newIsChecked !== previousIsChecked) {\n        changedIndices.push(i);\n      }\n      this.adapter.setCheckedCheckboxOrRadioAtIndex(i, newIsChecked);\n      this.adapter.setAttributeForElementIndex(i, selectionAttribute, newIsChecked ? 'true' : 'false');\n    }\n    this.selectedIndex = index;\n    // If the selected value has changed through user interaction,\n    // we want to notify the selection change to the adapter.\n    if (options.isUserInteraction && changedIndices.length) {\n      this.adapter.notifySelectionChange(changedIndices);\n    }\n  };\n  /**\n   * Toggles the state of all checkboxes in the given range (inclusive) based on\n   * the state of the checkbox at the `toggleIndex`. To determine whether to set\n   * the given range to checked or unchecked, read the value of the checkbox at\n   * the `toggleIndex` and negate it. Then apply that new checked state to all\n   * checkboxes in the range.\n   * @param fromIndex The start of the range of checkboxes to toggle\n   * @param toIndex The end of the range of checkboxes to toggle\n   * @param toggleIndex The index that will be used to determine the new state\n   *     of the given checkbox range.\n   */\n  MDCListFoundation.prototype.toggleCheckboxRange = function (fromIndex, toIndex, toggleIndex) {\n    this.lastSelectedIndex = toggleIndex;\n    var currentlySelected = new Set(this.selectedIndex === numbers.UNSET_INDEX ? [] : this.selectedIndex);\n    var newIsChecked = !(currentlySelected === null || currentlySelected === void 0 ? void 0 : currentlySelected.has(toggleIndex));\n    var _a = __read([fromIndex, toIndex].sort(), 2),\n      startIndex = _a[0],\n      endIndex = _a[1];\n    var selectionAttribute = this.getSelectionAttribute();\n    var changedIndices = [];\n    for (var i = startIndex; i <= endIndex; i++) {\n      if (this.isIndexDisabled(i)) {\n        continue;\n      }\n      var previousIsChecked = currentlySelected.has(i);\n      // If the selection has changed for this item, we keep track of it\n      // so that we can notify the adapter.\n      if (newIsChecked !== previousIsChecked) {\n        changedIndices.push(i);\n        this.adapter.setCheckedCheckboxOrRadioAtIndex(i, newIsChecked);\n        this.adapter.setAttributeForElementIndex(i, selectionAttribute, \"\" + newIsChecked);\n        if (newIsChecked) {\n          currentlySelected.add(i);\n        } else {\n          currentlySelected.delete(i);\n        }\n      }\n    }\n    // If the selected value has changed, update and notify the selection change\n    // to the adapter.\n    if (changedIndices.length) {\n      this.selectedIndex = __spreadArray([], __read(currentlySelected));\n      this.adapter.notifySelectionChange(changedIndices);\n    }\n  };\n  MDCListFoundation.prototype.setTabindexAtIndex = function (index) {\n    if (this.focusedItemIndex === numbers.UNSET_INDEX && index !== 0) {\n      // If some list item was selected set first list item's tabindex to -1.\n      // Generally, tabindex is set to 0 on first list item of list that has no\n      // preselected items.\n      this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');\n    } else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {\n      this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');\n    }\n    // Set the previous selection's tabindex to -1. We need this because\n    // in selection menus that are not visible, programmatically setting an\n    // option will not change focus but will change where tabindex should be 0.\n    if (!(this.selectedIndex instanceof Array) && this.selectedIndex !== index) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex, 'tabindex', '-1');\n    }\n    if (index !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');\n    }\n  };\n  /**\n   * @return Return true if it is single selectin list, checkbox list or radio\n   *     list.\n   */\n  MDCListFoundation.prototype.isSelectableList = function () {\n    return this.isSingleSelectionList || this.isCheckboxList || this.isRadioList;\n  };\n  MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function () {\n    var targetIndex = this.getFirstSelectedOrFocusedItemIndex();\n    this.setTabindexAtIndex(targetIndex);\n  };\n  MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function () {\n    // Action lists retain focus on the most recently focused item.\n    if (!this.isSelectableList()) {\n      return Math.max(this.focusedItemIndex, 0);\n    }\n    // Single-selection lists focus the selected item.\n    if (typeof this.selectedIndex === 'number' && this.selectedIndex !== numbers.UNSET_INDEX) {\n      return this.selectedIndex;\n    }\n    // Multiple-selection lists focus the first selected item.\n    if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) {\n      return this.selectedIndex.reduce(function (minIndex, currentIndex) {\n        return Math.min(minIndex, currentIndex);\n      });\n    }\n    // Selection lists without a selection focus the first item.\n    return 0;\n  };\n  MDCListFoundation.prototype.isIndexValid = function (index, validateListType) {\n    var _this = this;\n    if (validateListType === void 0) {\n      validateListType = true;\n    }\n    if (index instanceof Array) {\n      if (!this.isCheckboxList && validateListType) {\n        throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n      }\n      if (index.length === 0) {\n        return true;\n      } else {\n        return index.some(function (i) {\n          return _this.isIndexInRange(i);\n        });\n      }\n    } else if (typeof index === 'number') {\n      if (this.isCheckboxList && validateListType) {\n        throw new Error(\"MDCListFoundation: Expected array of index for checkbox based list but got number: \" + index);\n      }\n      return this.isIndexInRange(index) || this.isSingleSelectionList && index === numbers.UNSET_INDEX;\n    } else {\n      return false;\n    }\n  };\n  MDCListFoundation.prototype.isIndexInRange = function (index) {\n    var listSize = this.adapter.getListItemCount();\n    return index >= 0 && index < listSize;\n  };\n  /**\n   * Sets selected index on user action, toggles checkboxes in checkbox lists\n   * by default, unless `isCheckboxAlreadyUpdatedInAdapter` is set to `true`.\n   *\n   * In cases where `isCheckboxAlreadyUpdatedInAdapter` is set to `true`, the\n   * UI is just updated to reflect the value returned by the adapter.\n   *\n   * When calling this, make sure user interaction does not toggle disabled\n   * list items.\n   */\n  MDCListFoundation.prototype.setSelectedIndexOnAction = function (index, isCheckboxAlreadyUpdatedInAdapter) {\n    this.lastSelectedIndex = index;\n    if (this.isCheckboxList) {\n      this.toggleCheckboxAtIndex(index, isCheckboxAlreadyUpdatedInAdapter);\n      this.adapter.notifySelectionChange([index]);\n    } else {\n      this.setSelectedIndex(index, {\n        isUserInteraction: true\n      });\n    }\n  };\n  MDCListFoundation.prototype.toggleCheckboxAtIndex = function (index, isCheckboxAlreadyUpdatedInAdapter) {\n    var selectionAttribute = this.getSelectionAttribute();\n    var adapterIsChecked = this.adapter.isCheckboxCheckedAtIndex(index);\n    // By default the checked value from the adapter is toggled unless the\n    // checked state in the adapter has already been updated beforehand.\n    // This can be happen when the underlying native checkbox has already\n    // been updated through the native click event.\n    var newCheckedValue;\n    if (isCheckboxAlreadyUpdatedInAdapter) {\n      newCheckedValue = adapterIsChecked;\n    } else {\n      newCheckedValue = !adapterIsChecked;\n      this.adapter.setCheckedCheckboxOrRadioAtIndex(index, newCheckedValue);\n    }\n    this.adapter.setAttributeForElementIndex(index, selectionAttribute, newCheckedValue ? 'true' : 'false');\n    // If none of the checkbox items are selected and selectedIndex is not\n    // initialized then provide a default value.\n    var selectedIndexes = this.selectedIndex === numbers.UNSET_INDEX ? [] : this.selectedIndex.slice();\n    if (newCheckedValue) {\n      selectedIndexes.push(index);\n    } else {\n      selectedIndexes = selectedIndexes.filter(function (i) {\n        return i !== index;\n      });\n    }\n    this.selectedIndex = selectedIndexes;\n  };\n  MDCListFoundation.prototype.focusItemAtIndex = function (index) {\n    this.adapter.focusItemAtIndex(index);\n    this.focusedItemIndex = index;\n  };\n  MDCListFoundation.prototype.checkboxListToggleAll = function (currentlySelectedIndexes, isUserInteraction) {\n    var count = this.adapter.getListItemCount();\n    // If all items are selected, deselect everything.\n    if (currentlySelectedIndexes.length === count) {\n      this.setCheckboxAtIndex([], {\n        isUserInteraction: isUserInteraction\n      });\n    } else {\n      // Otherwise select all enabled options.\n      var allIndexes = [];\n      for (var i = 0; i < count; i++) {\n        if (!this.isIndexDisabled(i) || currentlySelectedIndexes.indexOf(i) > -1) {\n          allIndexes.push(i);\n        }\n      }\n      this.setCheckboxAtIndex(allIndexes, {\n        isUserInteraction: isUserInteraction\n      });\n    }\n  };\n  /**\n   * Given the next desired character from the user, adds it to the typeahead\n   * buffer. Then, attempts to find the next option matching the buffer. Wraps\n   * around if at the end of options.\n   *\n   * @param nextChar The next character to add to the prefix buffer.\n   * @param startingIndex The index from which to start matching. Only relevant\n   *     when starting a new match sequence. To start a new match sequence,\n   *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n   *     to clear after a set interval defined in list foundation. Defaults to\n   *     the currently focused index.\n   * @return The index of the matched item, or -1 if no match.\n   */\n  MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {\n    var _this = this;\n    if (skipFocus === void 0) {\n      skipFocus = false;\n    }\n    var opts = {\n      focusItemAtIndex: function (index) {\n        _this.focusItemAtIndex(index);\n      },\n      focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,\n      nextChar: nextChar,\n      sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n      skipFocus: skipFocus,\n      isItemAtIndexDisabled: function (index) {\n        return _this.isIndexDisabled(index);\n      }\n    };\n    return typeahead.matchItem(opts, this.typeaheadState);\n  };\n  /**\n   * Initializes the MDCListTextAndIndex data structure by indexing the current\n   * list items by primary text.\n   *\n   * @return The primary texts of all the list items sorted by first character.\n   */\n  MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {\n    return typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);\n  };\n  /**\n   * Clears the typeahead buffer.\n   */\n  MDCListFoundation.prototype.clearTypeaheadBuffer = function () {\n    typeahead.clearBuffer(this.typeaheadState);\n  };\n  return MDCListFoundation;\n}(MDCFoundation);\nexport { MDCListFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCListFoundation;","map":{"version":3,"names":["MDCFoundation","normalizeKey","cssClasses","numbers","strings","preventDefaultEvent","typeahead","isNumberArray","selectedIndex","Array","handledModifierKeys","createModifierChecker","event","eventModifiers","Set","filter","m","getModifierState","modifiers","every","has","length","size","MDCListFoundation","_super","__extends","adapter","_this","call","__assign","defaultAdapter","wrapFocus","isVertical","isSingleSelectionList","areDisabledItemsFocusable","UNSET_INDEX","focusedItemIndex","useActivatedClass","useSelectedAttr","ariaCurrentAttrValue","isCheckboxList","isRadioList","lastSelectedIndex","hasTypeahead","typeaheadState","initState","sortedIndexByFirstChar","Map","Object","defineProperty","get","addClassForElementIndex","undefined","focusItemAtIndex","getAttributeForElementIndex","getFocusedElementIndex","getListItemCount","hasCheckboxAtIndex","hasRadioAtIndex","isCheckboxCheckedAtIndex","isFocusInsideList","isRootFocused","listItemAtIndexHasClass","notifyAction","notifySelectionChange","removeClassForElementIndex","setAttributeForElementIndex","setCheckedCheckboxOrRadioAtIndex","setTabIndexForListItemChildren","getPrimaryTextAtIndex","prototype","layout","maybeInitializeSingleSelection","typeaheadInitSortedIndex","getFocusedItemIndex","setWrapFocus","value","setVerticalOrientation","setSingleSelection","getSelectedIndexFromDOM","setDisabledItemsFocusable","selectedItemIndex","hasActivatedClass","LIST_ITEM_ACTIVATED_CLASS","setUseActivatedClass","listItemsCount","i","hasSelectedClass","LIST_ITEM_SELECTED_CLASS","setHasTypeahead","isTypeaheadInProgress","isTypingInProgress","useActivated","setUseSelectedAttribute","useSelected","getSelectedIndex","setSelectedIndex","index","options","isIndexValid","setCheckboxAtIndex","setRadioAtIndex","setSingleSelectionAtIndex","handleFocusIn","listItemIndex","handleFocusOut","setTimeout","setTabindexToFirstSelectedOrFocusedItem","isIndexDisabled","LIST_ITEM_DISABLED_CLASS","handleKeydown","isRootListItem","isArrowLeft","isArrowUp","isArrowRight","isArrowDown","isHome","isEnd","isEnter","isSpace","isForward","isBack","isLetterA","key","eventHasModifiers","preventDefault","focusLastElement","focusFirstElement","focusedIndex","setSelectedIndexOnAction","handleKeydownOpts","isTargetListItem","isItemAtIndexDisabled","currentIndex","focusNextElement","focusPrevElement","toggleCheckboxRange","checkboxListToggleAll","target","tagName","isSelectableList","_a","handleClick","isCheckboxAlreadyUpdatedInAdapter","count","nextIndex","firstChecked","prevIndex","focusInitialElement","initialIndex","getFirstSelectedOrFocusedItemIndex","setEnabled","itemIndex","isEnabled","ARIA_DISABLED","forceUpdate","selectedClassName","setAriaForSingleSelectionAtIndex","setTabindexAtIndex","isUserInteraction","ARIA_CURRENT","isAriaCurrent","ariaAttribute","ARIA_SELECTED","ariaAttributeValue","getSelectionAttribute","ARIA_CHECKED","selectionAttribute","currentlySelected","changedIndices","previousIsChecked","newIsChecked","indexOf","push","fromIndex","toIndex","toggleIndex","__read","sort","startIndex","endIndex","add","delete","__spreadArray","targetIndex","Math","max","reduce","minIndex","min","validateListType","Error","some","isIndexInRange","listSize","toggleCheckboxAtIndex","adapterIsChecked","newCheckedValue","selectedIndexes","slice","currentlySelectedIndexes","allIndexes","typeaheadMatchItem","nextChar","startingIndex","skipFocus","opts","matchItem","initSortedIndex","clearTypeaheadBuffer","clearBuffer"],"sources":["foundation.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQA,aAAa,QAAO,2BAA2B;AACvD,SAAQC,YAAY,QAAO,wBAAwB;AAGnD,SAAQC,UAAU,EAAEC,OAAO,EAAEC,OAAO,QAAO,aAAa;AACxD,SAAQC,mBAAmB,QAAO,UAAU;AAC5C,OAAO,KAAKC,SAAS,MAAM,aAAa;AAGxC,SAASC,aAAaA,CAACC,aAA2B;EAChD,OAAOA,aAAa,YAAYC,KAAK;AACvC;AAaA;AACA,IAAMC,mBAAmB,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAU;AAKxE;AACA,SAASC,qBAAqBA,CAACC,KAAgC;EAC7D,IAAMC,cAAc,GAAG,IAAIC,GAAG,CAC1BF,KAAK,GAAGF,mBAAmB,CAACK,MAAM,CAAC,UAAAC,CAAC;IAAI,OAAAJ,KAAK,CAACK,gBAAgB,CAACD,CAAC,CAAC;EAAzB,CAAyB,CAAC,GAAG,EAAE,CAAC;EAC5E,OAAO,UAACE,SAAwB;IACrB,OAAAA,SAAS,CAACC,KAAK,CAAC,UAAAH,CAAC;MAAI,OAAAH,cAAc,CAACO,GAAG,CAACJ,CAAC,CAAC;IAArB,CAAqB,CAAC,IAClDE,SAAS,CAACG,MAAM,KAAKR,cAAc,CAACS,IAAI;EADjC,CACiC;AAC9C;AAEA,IAAAC,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAsDrC,SAAAD,kBAAYG,OAAiC;IAA7C,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAAC,QAAA,CAAAA,QAAA,KAAUN,iBAAiB,CAACO,cAAc,GAAKJ,OAAO,EAAE;IAnBlDC,KAAA,CAAAI,SAAS,GAAG,KAAK;IACjBJ,KAAA,CAAAK,UAAU,GAAG,IAAI;IACjBL,KAAA,CAAAM,qBAAqB,GAAG,KAAK;IAC7BN,KAAA,CAAAO,yBAAyB,GAAG,IAAI;IAChCP,KAAA,CAAAnB,aAAa,GAAiBL,OAAO,CAACgC,WAAW;IACjDR,KAAA,CAAAS,gBAAgB,GAAGjC,OAAO,CAACgC,WAAW;IACtCR,KAAA,CAAAU,iBAAiB,GAAG,KAAK;IACzBV,KAAA,CAAAW,eAAe,GAAG,KAAK;IACvBX,KAAA,CAAAY,oBAAoB,GAAgB,IAAI;IACxCZ,KAAA,CAAAa,cAAc,GAAG,KAAK;IACtBb,KAAA,CAAAc,WAAW,GAAG,KAAK;IACnBd,KAAA,CAAAe,iBAAiB,GAAgB,IAAI;IAErCf,KAAA,CAAAgB,YAAY,GAAG,KAAK;IAC5B;IACiBhB,KAAA,CAAAiB,cAAc,GAAGtC,SAAS,CAACuC,SAAS,EAAE;IAC/ClB,KAAA,CAAAmB,sBAAsB,GAAG,IAAIC,GAAG,EAAiC;;EAIzE;EAvDAC,MAAA,CAAAC,cAAA,CAAoB1B,iBAAA,WAAO;SAA3B,SAAA2B,CAAA;MACE,OAAO9C,OAAO;IAChB,CAAC;;;;EAED4C,MAAA,CAAAC,cAAA,CAAoB1B,iBAAA,cAAU;SAA9B,SAAA2B,CAAA;MACE,OAAOhD,UAAU;IACnB,CAAC;;;;EAED8C,MAAA,CAAAC,cAAA,CAAoB1B,iBAAA,WAAO;SAA3B,SAAA2B,CAAA;MACE,OAAO/C,OAAO;IAChB,CAAC;;;;EAED6C,MAAA,CAAAC,cAAA,CAAoB1B,iBAAA,kBAAc;SAAlC,SAAA2B,CAAA;MACE,OAAO;QACLC,uBAAuB,EAAE,SAAAA,CAAA;UAAM,OAAAC,SAAS;QAAT,CAAS;QACxCC,gBAAgB,EAAE,SAAAA,CAAA;UAAM,OAAAD,SAAS;QAAT,CAAS;QACjCE,2BAA2B,EAAE,SAAAA,CAAA;UAAM,WAAI;QAAJ,CAAI;QACvCC,sBAAsB,EAAE,SAAAA,CAAA;UAAM,QAAC;QAAD,CAAC;QAC/BC,gBAAgB,EAAE,SAAAA,CAAA;UAAM,QAAC;QAAD,CAAC;QACzBC,kBAAkB,EAAE,SAAAA,CAAA;UAAM,YAAK;QAAL,CAAK;QAC/BC,eAAe,EAAE,SAAAA,CAAA;UAAM,YAAK;QAAL,CAAK;QAC5BC,wBAAwB,EAAE,SAAAA,CAAA;UAAM,YAAK;QAAL,CAAK;QACrCC,iBAAiB,EAAE,SAAAA,CAAA;UAAM,YAAK;QAAL,CAAK;QAC9BC,aAAa,EAAE,SAAAA,CAAA;UAAM,YAAK;QAAL,CAAK;QAC1BC,uBAAuB,EAAE,SAAAA,CAAA;UAAM,YAAK;QAAL,CAAK;QACpCC,YAAY,EAAE,SAAAA,CAAA;UAAM,OAAAX,SAAS;QAAT,CAAS;QAC7BY,qBAAqB,EAAE,SAAAA,CAAA,GAAO,CAAC;QAC/BC,0BAA0B,EAAE,SAAAA,CAAA;UAAM,OAAAb,SAAS;QAAT,CAAS;QAC3Cc,2BAA2B,EAAE,SAAAA,CAAA;UAAM,OAAAd,SAAS;QAAT,CAAS;QAC5Ce,gCAAgC,EAAE,SAAAA,CAAA;UAAM,OAAAf,SAAS;QAAT,CAAS;QACjDgB,8BAA8B,EAAE,SAAAA,CAAA;UAAM,OAAAhB,SAAS;QAAT,CAAS;QAC/CiB,qBAAqB,EAAE,SAAAA,CAAA;UAAM,SAAE;QAAF;OAC9B;IACH,CAAC;;;;EAwBD9C,iBAAA,CAAA+C,SAAA,CAAAC,MAAM,GAAN;IACE,IAAI,IAAI,CAAC7C,OAAO,CAAC8B,gBAAgB,EAAE,KAAK,CAAC,EAAE;MACzC;;IAGF;IACA,IAAI,IAAI,CAAC9B,OAAO,CAAC+B,kBAAkB,CAAC,CAAC,CAAC,EAAE;MACtC,IAAI,CAACjB,cAAc,GAAG,IAAI;KAC3B,MAAM,IAAI,IAAI,CAACd,OAAO,CAACgC,eAAe,CAAC,CAAC,CAAC,EAAE;MAC1C,IAAI,CAACjB,WAAW,GAAG,IAAI;KACxB,MAAM;MACL,IAAI,CAAC+B,8BAA8B,EAAE;;IAGvC,IAAI,IAAI,CAAC7B,YAAY,EAAE;MACrB,IAAI,CAACG,sBAAsB,GAAG,IAAI,CAAC2B,wBAAwB,EAAE;;EAEjE,CAAC;EAED;EACAlD,iBAAA,CAAA+C,SAAA,CAAAI,mBAAmB,GAAnB;IACE,OAAO,IAAI,CAACtC,gBAAgB;EAC9B,CAAC;EAED;EACAb,iBAAA,CAAA+C,SAAA,CAAAK,YAAY,GAAZ,UAAaC,KAAc;IACzB,IAAI,CAAC7C,SAAS,GAAG6C,KAAK;EACxB,CAAC;EAED;;;;EAIArD,iBAAA,CAAA+C,SAAA,CAAAO,sBAAsB,GAAtB,UAAuBD,KAAc;IACnC,IAAI,CAAC5C,UAAU,GAAG4C,KAAK;EACzB,CAAC;EAED;EACArD,iBAAA,CAAA+C,SAAA,CAAAQ,kBAAkB,GAAlB,UAAmBF,KAAc;IAC/B,IAAI,CAAC3C,qBAAqB,GAAG2C,KAAK;IAClC,IAAIA,KAAK,EAAE;MACT,IAAI,CAACJ,8BAA8B,EAAE;MACrC,IAAI,CAAChE,aAAa,GAAG,IAAI,CAACuE,uBAAuB,EAAE;;EAEvD,CAAC;EAEDxD,iBAAA,CAAA+C,SAAA,CAAAU,yBAAyB,GAAzB,UAA0BJ,KAAc;IACtC,IAAI,CAAC1C,yBAAyB,GAAG0C,KAAK;EACxC,CAAC;EAED;;;;EAIQrD,iBAAA,CAAA+C,SAAA,CAAAE,8BAA8B,GAAtC;IACE,IAAMS,iBAAiB,GAAG,IAAI,CAACF,uBAAuB,EAAE;IACxD,IAAIE,iBAAiB,KAAK9E,OAAO,CAACgC,WAAW,EAAE;IAE/C,IAAM+C,iBAAiB,GAAG,IAAI,CAACxD,OAAO,CAACoC,uBAAuB,CAC1DmB,iBAAiB,EAAE/E,UAAU,CAACiF,yBAAyB,CAAC;IAC5D,IAAID,iBAAiB,EAAE;MACrB,IAAI,CAACE,oBAAoB,CAAC,IAAI,CAAC;;IAEjC,IAAI,CAACnD,qBAAqB,GAAG,IAAI;IACjC,IAAI,CAACzB,aAAa,GAAGyE,iBAAiB;EACxC,CAAC;EAED;EACQ1D,iBAAA,CAAA+C,SAAA,CAAAS,uBAAuB,GAA/B;IACE,IAAIvE,aAAa,GAAGL,OAAO,CAACgC,WAAW;IACvC,IAAMkD,cAAc,GAAG,IAAI,CAAC3D,OAAO,CAAC8B,gBAAgB,EAAE;IACtD,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,cAAc,EAAEC,CAAC,EAAE,EAAE;MACvC,IAAMC,gBAAgB,GAAG,IAAI,CAAC7D,OAAO,CAACoC,uBAAuB,CACzDwB,CAAC,EAAEpF,UAAU,CAACsF,wBAAwB,CAAC;MAC3C,IAAMN,iBAAiB,GAAG,IAAI,CAACxD,OAAO,CAACoC,uBAAuB,CAC1DwB,CAAC,EAAEpF,UAAU,CAACiF,yBAAyB,CAAC;MAC5C,IAAI,EAAEI,gBAAgB,IAAIL,iBAAiB,CAAC,EAAE;QAC5C;;MAGF1E,aAAa,GAAG8E,CAAC;MACjB;;IAGF,OAAO9E,aAAa;EACtB,CAAC;EAED;;;;EAIAe,iBAAA,CAAA+C,SAAA,CAAAmB,eAAe,GAAf,UAAgB9C,YAAqB;IACnC,IAAI,CAACA,YAAY,GAAGA,YAAY;IAChC,IAAIA,YAAY,EAAE;MAChB,IAAI,CAACG,sBAAsB,GAAG,IAAI,CAAC2B,wBAAwB,EAAE;;EAEjE,CAAC;EAED;;;EAGAlD,iBAAA,CAAA+C,SAAA,CAAAoB,qBAAqB,GAArB;IACE,OAAO,IAAI,CAAC/C,YAAY,IACpBrC,SAAS,CAACqF,kBAAkB,CAAC,IAAI,CAAC/C,cAAc,CAAC;EACvD,CAAC;EAED;EACArB,iBAAA,CAAA+C,SAAA,CAAAc,oBAAoB,GAApB,UAAqBQ,YAAqB;IACxC,IAAI,CAACvD,iBAAiB,GAAGuD,YAAY;EACvC,CAAC;EAED;;;;EAIArE,iBAAA,CAAA+C,SAAA,CAAAuB,uBAAuB,GAAvB,UAAwBC,WAAoB;IAC1C,IAAI,CAACxD,eAAe,GAAGwD,WAAW;EACpC,CAAC;EAEDvE,iBAAA,CAAA+C,SAAA,CAAAyB,gBAAgB,GAAhB;IACE,OAAO,IAAI,CAACvF,aAAa;EAC3B,CAAC;EAEDe,iBAAA,CAAA+C,SAAA,CAAA0B,gBAAgB,GAAhB,UAAiBC,KAAmB,EAAEC,OAAoC;IAApC,IAAAA,OAAA;MAAAA,OAAA,KAAoC;IAAA;IACxE,IAAI,CAAC,IAAI,CAACC,YAAY,CAACF,KAAK,CAAC,EAAE;MAC7B;;IAGF,IAAI,IAAI,CAACzD,cAAc,EAAE;MACvB,IAAI,CAAC4D,kBAAkB,CAACH,KAAiB,EAAEC,OAAO,CAAC;KACpD,MAAM,IAAI,IAAI,CAACzD,WAAW,EAAE;MAC3B,IAAI,CAAC4D,eAAe,CAACJ,KAAe,EAAEC,OAAO,CAAC;KAC/C,MAAM;MACL,IAAI,CAACI,yBAAyB,CAACL,KAAe,EAAEC,OAAO,CAAC;;EAE5D,CAAC;EAED;;;EAGA3E,iBAAA,CAAA+C,SAAA,CAAAiC,aAAa,GAAb,UAAcC,aAAqB;IACjC,IAAIA,aAAa,IAAI,CAAC,EAAE;MACtB,IAAI,CAACpE,gBAAgB,GAAGoE,aAAa;MACrC,IAAI,CAAC9E,OAAO,CAACwC,2BAA2B,CAACsC,aAAa,EAAE,UAAU,EAAE,GAAG,CAAC;MACxE,IAAI,CAAC9E,OAAO,CAAC0C,8BAA8B,CAACoC,aAAa,EAAE,GAAG,CAAC;;EAEnE,CAAC;EAED;;;EAGAjF,iBAAA,CAAA+C,SAAA,CAAAmC,cAAc,GAAd,UAAeD,aAAqB;IAApC,IAAA7E,KAAA;IACE,IAAI6E,aAAa,IAAI,CAAC,EAAE;MACtB,IAAI,CAAC9E,OAAO,CAACwC,2BAA2B,CAACsC,aAAa,EAAE,UAAU,EAAE,IAAI,CAAC;MACzE,IAAI,CAAC9E,OAAO,CAAC0C,8BAA8B,CAACoC,aAAa,EAAE,IAAI,CAAC;;IAGlE;;;;IAIAE,UAAU,CAAC;MACT,IAAI,CAAC/E,KAAI,CAACD,OAAO,CAACkC,iBAAiB,EAAE,EAAE;QACrCjC,KAAI,CAACgF,uCAAuC,EAAE;;IAElD,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;EAEOpF,iBAAA,CAAA+C,SAAA,CAAAsC,eAAe,GAAvB,UAAwBX,KAAa;IACnC,OAAO,IAAI,CAACvE,OAAO,CAACoC,uBAAuB,CACvCmC,KAAK,EAAE/F,UAAU,CAAC2G,wBAAwB,CAAC;EACjD,CAAC;EAED;;;EAGAtF,iBAAA,CAAA+C,SAAA,CAAAwC,aAAa,GAAb,UACIlG,KAAoB,EAAEmG,cAAuB,EAAEP,aAAqB;IADxE,IAAA7E,KAAA;;IAEE,IAAMqF,WAAW,GAAG/G,YAAY,CAACW,KAAK,CAAC,KAAK,WAAW;IACvD,IAAMqG,SAAS,GAAGhH,YAAY,CAACW,KAAK,CAAC,KAAK,SAAS;IACnD,IAAMsG,YAAY,GAAGjH,YAAY,CAACW,KAAK,CAAC,KAAK,YAAY;IACzD,IAAMuG,WAAW,GAAGlH,YAAY,CAACW,KAAK,CAAC,KAAK,WAAW;IACvD,IAAMwG,MAAM,GAAGnH,YAAY,CAACW,KAAK,CAAC,KAAK,MAAM;IAC7C,IAAMyG,KAAK,GAAGpH,YAAY,CAACW,KAAK,CAAC,KAAK,KAAK;IAC3C,IAAM0G,OAAO,GAAGrH,YAAY,CAACW,KAAK,CAAC,KAAK,OAAO;IAC/C,IAAM2G,OAAO,GAAGtH,YAAY,CAACW,KAAK,CAAC,KAAK,UAAU;IAElD;IACA,IAAM4G,SAAS,GACV,IAAI,CAACxF,UAAU,IAAImF,WAAW,IAAM,CAAC,IAAI,CAACnF,UAAU,IAAIkF,YAAa;IAC1E,IAAMO,MAAM,GACP,IAAI,CAACzF,UAAU,IAAIiF,SAAS,IAAM,CAAC,IAAI,CAACjF,UAAU,IAAIgF,WAAY;IAEvE;IACA;IACA,IAAMU,SAAS,GAAG9G,KAAK,CAAC+G,GAAG,KAAK,GAAG,IAAI/G,KAAK,CAAC+G,GAAG,KAAK,GAAG;IAExD,IAAMC,iBAAiB,GAAGjH,qBAAqB,CAACC,KAAK,CAAC;IAEtD,IAAI,IAAI,CAACc,OAAO,CAACmC,aAAa,EAAE,EAAE;MAChC,IAAI,CAAC4D,MAAM,IAAIJ,KAAK,KAAKO,iBAAiB,CAAC,EAAE,CAAC,EAAE;QAC9ChH,KAAK,CAACiH,cAAc,EAAE;QACtB,IAAI,CAACC,gBAAgB,EAAE;OACxB,MAAM,IAAI,CAACN,SAAS,IAAIJ,MAAM,KAAKQ,iBAAiB,CAAC,EAAE,CAAC,EAAE;QACzDhH,KAAK,CAACiH,cAAc,EAAE;QACtB,IAAI,CAACE,iBAAiB,EAAE;OACzB,MAAM,IACHN,MAAM,IAAIG,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAACpF,cAAc,EAAE;QACjE5B,KAAK,CAACiH,cAAc,EAAE;QACtB,IAAMG,YAAY,GAAG,IAAI,CAACF,gBAAgB,EAAE;QAC5C,IAAIE,YAAY,KAAK,CAAC,CAAC,EAAE;UACvB,IAAI,CAACC,wBAAwB,CAACD,YAAY,EAAE,KAAK,CAAC;;OAErD,MAAM,IACHR,SAAS,IAAII,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAACpF,cAAc,EAAE;QACpE5B,KAAK,CAACiH,cAAc,EAAE;QACtB,IAAMG,YAAY,GAAG,IAAI,CAACD,iBAAiB,EAAE;QAC7C,IAAIC,YAAY,KAAK,CAAC,CAAC,EAAE;UACvB,IAAI,CAACC,wBAAwB,CAACD,YAAY,EAAE,KAAK,CAAC;;;MAItD,IAAI,IAAI,CAACrF,YAAY,EAAE;QACrB,IAAMuF,iBAAiB,GAAgC;UACrDtH,KAAK,EAAAA,KAAA;UACLyC,gBAAgB,EAAE,SAAAA,CAAC4C,KAAK;YACtBtE,KAAI,CAAC0B,gBAAgB,CAAC4C,KAAK,CAAC;UAC9B,CAAC;UACD7D,gBAAgB,EAAE,CAAC,CAAC;UACpB+F,gBAAgB,EAAEpB,cAAc;UAChCjE,sBAAsB,EAAE,IAAI,CAACA,sBAAsB;UACnDsF,qBAAqB,EAAE,SAAAA,CAACnC,KAAK;YAAK,OAAAtE,KAAI,CAACiF,eAAe,CAACX,KAAK,CAAC;UAA3B;SACnC;QAED3F,SAAS,CAACwG,aAAa,CAACoB,iBAAiB,EAAE,IAAI,CAACtF,cAAc,CAAC;;MAGjE;;IAGF,IAAIyF,YAAY,GAAG,IAAI,CAAC3G,OAAO,CAAC6B,sBAAsB,EAAE;IACxD,IAAI8E,YAAY,KAAK,CAAC,CAAC,EAAE;MACvBA,YAAY,GAAG7B,aAAa;MAC5B,IAAI6B,YAAY,GAAG,CAAC,EAAE;QACpB;QACA;QACA;;;IAIJ,IAAIb,SAAS,IAAII,iBAAiB,CAAC,EAAE,CAAC,EAAE;MACtCvH,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAI,CAAC0H,gBAAgB,CAACD,YAAY,CAAC;KACpC,MAAM,IAAIZ,MAAM,IAAIG,iBAAiB,CAAC,EAAE,CAAC,EAAE;MAC1CvH,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAI,CAAC2H,gBAAgB,CAACF,YAAY,CAAC;KACpC,MAAM,IACHb,SAAS,IAAII,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAACpF,cAAc,EAAE;MACpEnC,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAMoH,YAAY,GAAG,IAAI,CAACM,gBAAgB,CAACD,YAAY,CAAC;MACxD,IAAIL,YAAY,KAAK,CAAC,CAAC,EAAE;QACvB,IAAI,CAACC,wBAAwB,CAACD,YAAY,EAAE,KAAK,CAAC;;KAErD,MAAM,IAAIP,MAAM,IAAIG,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAACpF,cAAc,EAAE;MACxEnC,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAMoH,YAAY,GAAG,IAAI,CAACO,gBAAgB,CAACF,YAAY,CAAC;MACxD,IAAIL,YAAY,KAAK,CAAC,CAAC,EAAE;QACvB,IAAI,CAACC,wBAAwB,CAACD,YAAY,EAAE,KAAK,CAAC;;KAErD,MAAM,IAAIZ,MAAM,IAAIQ,iBAAiB,CAAC,EAAE,CAAC,EAAE;MAC1CvH,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAI,CAACmH,iBAAiB,EAAE;KACzB,MAAM,IAAIV,KAAK,IAAIO,iBAAiB,CAAC,EAAE,CAAC,EAAE;MACzCvH,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAI,CAACkH,gBAAgB,EAAE;KACxB,MAAM,IACHV,MAAM,IAAIQ,iBAAiB,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,IACjD,IAAI,CAACpF,cAAc,EAAE;MACvBnC,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAI,IAAI,CAACgG,eAAe,CAACyB,YAAY,CAAC,EAAE;QACtC;;MAEF,IAAI,CAACN,iBAAiB,EAAE;MACxB,IAAI,CAACS,mBAAmB,CAAC,CAAC,EAAEH,YAAY,EAAEA,YAAY,CAAC;KACxD,MAAM,IACHhB,KAAK,IAAIO,iBAAiB,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,IAChD,IAAI,CAACpF,cAAc,EAAE;MACvBnC,mBAAmB,CAACO,KAAK,CAAC;MAC1B,IAAI,IAAI,CAACgG,eAAe,CAACyB,YAAY,CAAC,EAAE;QACtC;;MAEF,IAAI,CAACP,gBAAgB,EAAE;MACvB,IAAI,CAACU,mBAAmB,CACpBH,YAAY,EAAE,IAAI,CAAC3G,OAAO,CAAC8B,gBAAgB,EAAE,GAAG,CAAC,EAAE6E,YAAY,CAAC;KACrE,MAAM,IACHX,SAAS,IAAIE,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,CAACpF,cAAc,EAAE;MACtE5B,KAAK,CAACiH,cAAc,EAAE;MACtB,IAAI,CAACY,qBAAqB,CACtB,IAAI,CAACjI,aAAa,KAAKL,OAAO,CAACgC,WAAW,GACtC,EAAE,GACF,IAAI,CAAC3B,aAAyB,EAClC,IAAI,CAAC;KACV,MAAM,IAAI,CAAC8G,OAAO,IAAIC,OAAO,KAAKK,iBAAiB,CAAC,EAAE,CAAC,EAAE;MACxD,IAAIb,cAAc,EAAE;QAClB;QACA;QACA,IAAM2B,MAAM,GAAG9H,KAAK,CAAC8H,MAAwB;QAC7C,IAAIA,MAAM,IAAIA,MAAM,CAACC,OAAO,KAAK,GAAG,IAAIrB,OAAO,EAAE;UAC/C;;QAEFjH,mBAAmB,CAACO,KAAK,CAAC;QAE1B,IAAI,IAAI,CAACgG,eAAe,CAACyB,YAAY,CAAC,EAAE;UACtC;;QAGF,IAAI,CAAC,IAAI,CAAC3C,qBAAqB,EAAE,EAAE;UACjC,IAAI,IAAI,CAACkD,gBAAgB,EAAE,EAAE;YAC3B,IAAI,CAACX,wBAAwB,CAACI,YAAY,EAAE,KAAK,CAAC;;UAEpD,IAAI,CAAC3G,OAAO,CAACqC,YAAY,CAACsE,YAAY,CAAC;;;KAG5C,MAAM,IACH,CAACf,OAAO,IAAIC,OAAO,KAAKK,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IACpD,IAAI,CAACpF,cAAc,EAAE;MACvB;MACA;MACA,IAAMkG,MAAM,GAAG9H,KAAK,CAAC8H,MAAwB;MAC7C,IAAIA,MAAM,IAAIA,MAAM,CAACC,OAAO,KAAK,GAAG,IAAIrB,OAAO,EAAE;QAC/C;;MAEFjH,mBAAmB,CAACO,KAAK,CAAC;MAE1B,IAAI,IAAI,CAACgG,eAAe,CAACyB,YAAY,CAAC,EAAE;QACtC;;MAGF,IAAI,CAAC,IAAI,CAAC3C,qBAAqB,EAAE,EAAE;QACjC,IAAI,CAAC8C,mBAAmB,CACpB,CAAAK,EAAA,OAAI,CAACnG,iBAAiB,cAAAmG,EAAA,cAAAA,EAAA,GAAIR,YAAY,EAAEA,YAAY,EAAEA,YAAY,CAAC;QACvE,IAAI,CAAC3G,OAAO,CAACqC,YAAY,CAACsE,YAAY,CAAC;;;IAI3C,IAAI,IAAI,CAAC1F,YAAY,EAAE;MACrB,IAAMuF,iBAAiB,GAAgC;QACrDtH,KAAK,EAAAA,KAAA;QACLyC,gBAAgB,EAAE,SAAAA,CAAC4C,KAAK;UAAMtE,KAAI,CAAC0B,gBAAgB,CAAC4C,KAAK,CAAC;QAAA,CAAC;QAC3D7D,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;QACvC+F,gBAAgB,EAAEpB,cAAc;QAChCjE,sBAAsB,EAAE,IAAI,CAACA,sBAAsB;QACnDsF,qBAAqB,EAAE,SAAAA,CAACnC,KAAK;UAAK,OAAAtE,KAAI,CAACiF,eAAe,CAACX,KAAK,CAAC;QAA3B;OACnC;MAED3F,SAAS,CAACwG,aAAa,CAACoB,iBAAiB,EAAE,IAAI,CAACtF,cAAc,CAAC;;EAEnE,CAAC;EAED;;;;;;;;;;EAUArB,iBAAA,CAAA+C,SAAA,CAAAwE,WAAW,GAAX,UACI7C,KAAa,EAAE8C,iCAA0C,EACzDnI,KAAkB;;IACpB,IAAMgH,iBAAiB,GAAGjH,qBAAqB,CAACC,KAAK,CAAC;IAEtD,IAAIqF,KAAK,KAAK9F,OAAO,CAACgC,WAAW,EAAE;MACjC;;IAGF,IAAI,IAAI,CAACyE,eAAe,CAACX,KAAK,CAAC,EAAE;MAC/B;;IAGF,IAAI2B,iBAAiB,CAAC,EAAE,CAAC,EAAE;MACzB,IAAI,IAAI,CAACgB,gBAAgB,EAAE,EAAE;QAC3B,IAAI,CAACX,wBAAwB,CAAChC,KAAK,EAAE8C,iCAAiC,CAAC;;MAEzE,IAAI,CAACrH,OAAO,CAACqC,YAAY,CAACkC,KAAK,CAAC;KACjC,MAAM,IAAI,IAAI,CAACzD,cAAc,IAAIoF,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE;MAC9D,IAAI,CAACY,mBAAmB,CAAC,CAAAK,EAAA,OAAI,CAACnG,iBAAiB,cAAAmG,EAAA,cAAAA,EAAA,GAAI5C,KAAK,EAAEA,KAAK,EAAEA,KAAK,CAAC;MACvE,IAAI,CAACvE,OAAO,CAACqC,YAAY,CAACkC,KAAK,CAAC;;EAEpC,CAAC;EAED;;;EAGA1E,iBAAA,CAAA+C,SAAA,CAAAgE,gBAAgB,GAAhB,UAAiBrC,KAAa;IAC5B,IAAM+C,KAAK,GAAG,IAAI,CAACtH,OAAO,CAAC8B,gBAAgB,EAAE;IAC7C,IAAIyF,SAAS,GAAGhD,KAAK;IACrB,IAAIiD,YAAY,GAAG,IAAI;IAEvB,GAAG;MACDD,SAAS,EAAE;MACX,IAAIA,SAAS,IAAID,KAAK,EAAE;QACtB,IAAI,IAAI,CAACjH,SAAS,EAAE;UAClBkH,SAAS,GAAG,CAAC;SACd,MAAM;UACL;UACA,OAAOhD,KAAK;;;MAGhB,IAAIgD,SAAS,KAAKC,YAAY,EAAE;QAC9B,OAAO,CAAC,CAAC;;MAEXA,YAAY,GAAGA,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAID,SAAS;KACzC,QAAQ,CAAC,IAAI,CAAC/G,yBAAyB,IAAI,IAAI,CAAC0E,eAAe,CAACqC,SAAS,CAAC;IAE3E,IAAI,CAAC5F,gBAAgB,CAAC4F,SAAS,CAAC;IAChC,OAAOA,SAAS;EAClB,CAAC;EAED;;;EAGA1H,iBAAA,CAAA+C,SAAA,CAAAiE,gBAAgB,GAAhB,UAAiBtC,KAAa;IAC5B,IAAM+C,KAAK,GAAG,IAAI,CAACtH,OAAO,CAAC8B,gBAAgB,EAAE;IAC7C,IAAI2F,SAAS,GAAGlD,KAAK;IACrB,IAAIiD,YAAY,GAAG,IAAI;IAEvB,GAAG;MACDC,SAAS,EAAE;MACX,IAAIA,SAAS,GAAG,CAAC,EAAE;QACjB,IAAI,IAAI,CAACpH,SAAS,EAAE;UAClBoH,SAAS,GAAGH,KAAK,GAAG,CAAC;SACtB,MAAM;UACL;UACA,OAAO/C,KAAK;;;MAGhB,IAAIkD,SAAS,KAAKD,YAAY,EAAE;QAC9B,OAAO,CAAC,CAAC;;MAEXA,YAAY,GAAGA,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAIC,SAAS;KACzC,QAAQ,CAAC,IAAI,CAACjH,yBAAyB,IAAI,IAAI,CAAC0E,eAAe,CAACuC,SAAS,CAAC;IAE3E,IAAI,CAAC9F,gBAAgB,CAAC8F,SAAS,CAAC;IAChC,OAAOA,SAAS;EAClB,CAAC;EAED5H,iBAAA,CAAA+C,SAAA,CAAAyD,iBAAiB,GAAjB;IACE;IACA;IACA,OAAO,IAAI,CAACO,gBAAgB,CAAC,CAAC,CAAC,CAAC;EAClC,CAAC;EAED/G,iBAAA,CAAA+C,SAAA,CAAAwD,gBAAgB,GAAhB;IACE;IACA;IACA,OAAO,IAAI,CAACS,gBAAgB,CAAC,IAAI,CAAC7G,OAAO,CAAC8B,gBAAgB,EAAE,CAAC;EAC/D,CAAC;EAEDjC,iBAAA,CAAA+C,SAAA,CAAA8E,mBAAmB,GAAnB;IACE,IAAMC,YAAY,GAAG,IAAI,CAACC,kCAAkC,EAAE;IAC9D,IAAI,CAACjG,gBAAgB,CAACgG,YAAY,CAAC;IACnC,OAAOA,YAAY;EACrB,CAAC;EAED;;;;EAIA9H,iBAAA,CAAA+C,SAAA,CAAAiF,UAAU,GAAV,UAAWC,SAAiB,EAAEC,SAAkB;IAC9C,IAAI,CAAC,IAAI,CAACtD,YAAY,CAACqD,SAAS,EAAE,KAAK,CAAC,EAAE;MACxC;;IAGF,IAAIC,SAAS,EAAE;MACb,IAAI,CAAC/H,OAAO,CAACuC,0BAA0B,CACnCuF,SAAS,EAAEtJ,UAAU,CAAC2G,wBAAwB,CAAC;MACnD,IAAI,CAACnF,OAAO,CAACwC,2BAA2B,CACpCsF,SAAS,EAAEpJ,OAAO,CAACsJ,aAAa,EAAE,OAAO,CAAC;KAC/C,MAAM;MACL,IAAI,CAAChI,OAAO,CAACyB,uBAAuB,CAChCqG,SAAS,EAAEtJ,UAAU,CAAC2G,wBAAwB,CAAC;MACnD,IAAI,CAACnF,OAAO,CAACwC,2BAA2B,CACpCsF,SAAS,EAAEpJ,OAAO,CAACsJ,aAAa,EAAE,MAAM,CAAC;;EAEjD,CAAC;EAEOnI,iBAAA,CAAA+C,SAAA,CAAAgC,yBAAyB,GAAjC,UACIL,KAAa,EAAEC,OAAoC;IAApC,IAAAA,OAAA;MAAAA,OAAA,KAAoC;IAAA;IACrD,IAAI,IAAI,CAAC1F,aAAa,KAAKyF,KAAK,IAAI,CAACC,OAAO,CAACyD,WAAW,EAAE;MACxD;;IAGF,IAAIC,iBAAiB,GAAG1J,UAAU,CAACsF,wBAAwB;IAC3D,IAAI,IAAI,CAACnD,iBAAiB,EAAE;MAC1BuH,iBAAiB,GAAG1J,UAAU,CAACiF,yBAAyB;;IAG1D,IAAI,IAAI,CAAC3E,aAAa,KAAKL,OAAO,CAACgC,WAAW,EAAE;MAC9C,IAAI,CAACT,OAAO,CAACuC,0BAA0B,CACnC,IAAI,CAACzD,aAAuB,EAAEoJ,iBAAiB,CAAC;;IAGtD,IAAI,CAACC,gCAAgC,CAAC5D,KAAK,CAAC;IAC5C,IAAI,CAAC6D,kBAAkB,CAAC7D,KAAK,CAAC;IAC9B,IAAIA,KAAK,KAAK9F,OAAO,CAACgC,WAAW,EAAE;MACjC,IAAI,CAACT,OAAO,CAACyB,uBAAuB,CAAC8C,KAAK,EAAE2D,iBAAiB,CAAC;;IAGhE,IAAI,CAACpJ,aAAa,GAAGyF,KAAK;IAE1B;IACA;IACA,IAAIC,OAAO,CAAC6D,iBAAiB,IAAI,CAAC7D,OAAO,CAACyD,WAAW,EAAE;MACrD,IAAI,CAACjI,OAAO,CAACsC,qBAAqB,CAAC,CAACiC,KAAK,CAAC,CAAC;;EAE/C,CAAC;EAED;;;EAGQ1E,iBAAA,CAAA+C,SAAA,CAAAuF,gCAAgC,GAAxC,UAAyC5D,KAAa;IACpD;IACA;IACA,IAAI,IAAI,CAACzF,aAAa,KAAKL,OAAO,CAACgC,WAAW,EAAE;MAC9C,IAAI,CAACI,oBAAoB,GACrB,IAAI,CAACb,OAAO,CAAC4B,2BAA2B,CAAC2C,KAAK,EAAE7F,OAAO,CAAC4J,YAAY,CAAC;;IAG3E,IAAMC,aAAa,GAAG,IAAI,CAAC1H,oBAAoB,KAAK,IAAI;IACxD,IAAM2H,aAAa,GACfD,aAAa,GAAG7J,OAAO,CAAC4J,YAAY,GAAG5J,OAAO,CAAC+J,aAAa;IAEhE,IAAI,IAAI,CAAC3J,aAAa,KAAKL,OAAO,CAACgC,WAAW,EAAE;MAC9C,IAAI,CAACT,OAAO,CAACwC,2BAA2B,CACpC,IAAI,CAAC1D,aAAuB,EAAE0J,aAAa,EAAE,OAAO,CAAC;;IAG3D,IAAIjE,KAAK,KAAK9F,OAAO,CAACgC,WAAW,EAAE;MACjC,IAAMiI,kBAAkB,GACpBH,aAAa,GAAG,IAAI,CAAC1H,oBAAoB,GAAG,MAAM;MACtD,IAAI,CAACb,OAAO,CAACwC,2BAA2B,CACpC+B,KAAK,EAAEiE,aAAa,EAAEE,kBAA4B,CAAC;;EAE3D,CAAC;EAED;;;EAGQ7I,iBAAA,CAAA+C,SAAA,CAAA+F,qBAAqB,GAA7B;IACE,OAAO,IAAI,CAAC/H,eAAe,GAAGlC,OAAO,CAAC+J,aAAa,GAAG/J,OAAO,CAACkK,YAAY;EAC5E,CAAC;EAED;;;;EAIQ/I,iBAAA,CAAA+C,SAAA,CAAA+B,eAAe,GAAvB,UAAwBJ,KAAa,EAAEC,OAAoC;IAApC,IAAAA,OAAA;MAAAA,OAAA,KAAoC;IAAA;IACzE,IAAMqE,kBAAkB,GAAG,IAAI,CAACF,qBAAqB,EAAE;IACvD,IAAI,CAAC3I,OAAO,CAACyC,gCAAgC,CAAC8B,KAAK,EAAE,IAAI,CAAC;IAE1D,IAAI,IAAI,CAACzF,aAAa,KAAKyF,KAAK,IAAI,CAACC,OAAO,CAACyD,WAAW,EAAE;MACxD;;IAGF,IAAI,IAAI,CAACnJ,aAAa,KAAKL,OAAO,CAACgC,WAAW,EAAE;MAC9C,IAAI,CAACT,OAAO,CAACwC,2BAA2B,CACpC,IAAI,CAAC1D,aAAuB,EAAE+J,kBAAkB,EAAE,OAAO,CAAC;;IAGhE,IAAI,CAAC7I,OAAO,CAACwC,2BAA2B,CAAC+B,KAAK,EAAEsE,kBAAkB,EAAE,MAAM,CAAC;IAE3E,IAAI,CAAC/J,aAAa,GAAGyF,KAAK;IAE1B;IACA;IACA,IAAIC,OAAO,CAAC6D,iBAAiB,IAAI,CAAC7D,OAAO,CAACyD,WAAW,EAAE;MACrD,IAAI,CAACjI,OAAO,CAACsC,qBAAqB,CAAC,CAACiC,KAAK,CAAC,CAAC;;EAE/C,CAAC;EAEO1E,iBAAA,CAAA+C,SAAA,CAAA8B,kBAAkB,GAA1B,UACIH,KAAe,EAAEC,OAAoC;IAApC,IAAAA,OAAA;MAAAA,OAAA,KAAoC;IAAA;IACvD,IAAMmC,YAAY,GAAG,IAAI,CAAC7H,aAAa;IACvC;IACA;IACA;IACA,IAAMgK,iBAAiB,GAAGtE,OAAO,CAAC6D,iBAAiB,GAC/C,IAAIjJ,GAAG,CACHuH,YAAY,KAAKlI,OAAO,CAACgC,WAAW,GAAG,EAAE,GACFkG,YAAwB,CAAC,GACpE,IAAI;IACR,IAAMkC,kBAAkB,GAAG,IAAI,CAACF,qBAAqB,EAAE;IACvD,IAAMI,cAAc,GAAG,EAAE;IAEzB,KAAK,IAAInF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5D,OAAO,CAAC8B,gBAAgB,EAAE,EAAE8B,CAAC,EAAE,EAAE;MACxD,IAAMoF,iBAAiB,GAAGF,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEpJ,GAAG,CAACkE,CAAC,CAAC;MACnD,IAAMqF,YAAY,GAAG1E,KAAK,CAAC2E,OAAO,CAACtF,CAAC,CAAC,IAAI,CAAC;MAE1C;MACA;MACA,IAAIqF,YAAY,KAAKD,iBAAiB,EAAE;QACtCD,cAAc,CAACI,IAAI,CAACvF,CAAC,CAAC;;MAGxB,IAAI,CAAC5D,OAAO,CAACyC,gCAAgC,CAACmB,CAAC,EAAEqF,YAAY,CAAC;MAC9D,IAAI,CAACjJ,OAAO,CAACwC,2BAA2B,CACpCoB,CAAC,EAAEiF,kBAAkB,EAAEI,YAAY,GAAG,MAAM,GAAG,OAAO,CAAC;;IAG7D,IAAI,CAACnK,aAAa,GAAGyF,KAAK;IAE1B;IACA;IACA,IAAIC,OAAO,CAAC6D,iBAAiB,IAAIU,cAAc,CAACpJ,MAAM,EAAE;MACtD,IAAI,CAACK,OAAO,CAACsC,qBAAqB,CAACyG,cAAc,CAAC;;EAEtD,CAAC;EAED;;;;;;;;;;;EAWQlJ,iBAAA,CAAA+C,SAAA,CAAAkE,mBAAmB,GAA3B,UACIsC,SAAiB,EAAEC,OAAe,EAAEC,WAAmB;IACzD,IAAI,CAACtI,iBAAiB,GAAGsI,WAAW;IACpC,IAAMR,iBAAiB,GAAG,IAAI1J,GAAG,CAC7B,IAAI,CAACN,aAAa,KAAKL,OAAO,CAACgC,WAAW,GACtC,EAAE,GACF,IAAI,CAAC3B,aAAyB,CAAC;IACvC,IAAMmK,YAAY,GAAG,EAACH,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEpJ,GAAG,CAAC4J,WAAW,CAAC;IAEnD,IAAAnC,EAAA,GAAAoC,MAAA,CAAyB,CAACH,SAAS,EAAEC,OAAO,CAAC,CAACG,IAAI,EAAE;MAAnDC,UAAU,GAAAtC,EAAA;MAAEuC,QAAQ,GAAAvC,EAAA,GAA+B;IAC1D,IAAM0B,kBAAkB,GAAG,IAAI,CAACF,qBAAqB,EAAE;IACvD,IAAMI,cAAc,GAAG,EAAE;IAEzB,KAAK,IAAInF,CAAC,GAAG6F,UAAU,EAAE7F,CAAC,IAAI8F,QAAQ,EAAE9F,CAAC,EAAE,EAAE;MAC3C,IAAI,IAAI,CAACsB,eAAe,CAACtB,CAAC,CAAC,EAAE;QAC3B;;MAEF,IAAMoF,iBAAiB,GAAGF,iBAAiB,CAACpJ,GAAG,CAACkE,CAAC,CAAC;MAElD;MACA;MACA,IAAIqF,YAAY,KAAKD,iBAAiB,EAAE;QACtCD,cAAc,CAACI,IAAI,CAACvF,CAAC,CAAC;QACtB,IAAI,CAAC5D,OAAO,CAACyC,gCAAgC,CAACmB,CAAC,EAAEqF,YAAY,CAAC;QAC9D,IAAI,CAACjJ,OAAO,CAACwC,2BAA2B,CACpCoB,CAAC,EAAEiF,kBAAkB,EAAE,KAAGI,YAAc,CAAC;QAC7C,IAAIA,YAAY,EAAE;UAChBH,iBAAiB,CAACa,GAAG,CAAC/F,CAAC,CAAC;SACzB,MAAM;UACLkF,iBAAiB,CAACc,MAAM,CAAChG,CAAC,CAAC;;;;IAKjC;IACA;IACA,IAAImF,cAAc,CAACpJ,MAAM,EAAE;MACzB,IAAI,CAACb,aAAa,GAAA+K,aAAA,KAAAN,MAAA,CAAOT,iBAAiB,EAAC;MAC3C,IAAI,CAAC9I,OAAO,CAACsC,qBAAqB,CAACyG,cAAc,CAAC;;EAEtD,CAAC;EAEOlJ,iBAAA,CAAA+C,SAAA,CAAAwF,kBAAkB,GAA1B,UAA2B7D,KAAa;IACtC,IAAI,IAAI,CAAC7D,gBAAgB,KAAKjC,OAAO,CAACgC,WAAW,IAAI8D,KAAK,KAAK,CAAC,EAAE;MAChE;MACA;MACA;MACA,IAAI,CAACvE,OAAO,CAACwC,2BAA2B,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC;KAC9D,MAAM,IAAI,IAAI,CAAC9B,gBAAgB,IAAI,CAAC,IAAI,IAAI,CAACA,gBAAgB,KAAK6D,KAAK,EAAE;MACxE,IAAI,CAACvE,OAAO,CAACwC,2BAA2B,CACpC,IAAI,CAAC9B,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC;;IAG9C;IACA;IACA;IACA,IAAI,EAAE,IAAI,CAAC5B,aAAa,YAAYC,KAAK,CAAC,IACtC,IAAI,CAACD,aAAa,KAAKyF,KAAK,EAAE;MAChC,IAAI,CAACvE,OAAO,CAACwC,2BAA2B,CACpC,IAAI,CAAC1D,aAAa,EAAE,UAAU,EAAE,IAAI,CAAC;;IAG3C,IAAIyF,KAAK,KAAK9F,OAAO,CAACgC,WAAW,EAAE;MACjC,IAAI,CAACT,OAAO,CAACwC,2BAA2B,CAAC+B,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC;;EAEpE,CAAC;EAED;;;;EAIQ1E,iBAAA,CAAA+C,SAAA,CAAAsE,gBAAgB,GAAxB;IACE,OAAO,IAAI,CAAC3G,qBAAqB,IAAI,IAAI,CAACO,cAAc,IACpD,IAAI,CAACC,WAAW;EACtB,CAAC;EAEOlB,iBAAA,CAAA+C,SAAA,CAAAqC,uCAAuC,GAA/C;IACE,IAAM6E,WAAW,GAAG,IAAI,CAAClC,kCAAkC,EAAE;IAC7D,IAAI,CAACQ,kBAAkB,CAAC0B,WAAW,CAAC;EACtC,CAAC;EAEOjK,iBAAA,CAAA+C,SAAA,CAAAgF,kCAAkC,GAA1C;IACE;IACA,IAAI,CAAC,IAAI,CAACV,gBAAgB,EAAE,EAAE;MAC5B,OAAO6C,IAAI,CAACC,GAAG,CAAC,IAAI,CAACtJ,gBAAgB,EAAE,CAAC,CAAC;;IAG3C;IACA,IAAI,OAAO,IAAI,CAAC5B,aAAa,KAAK,QAAQ,IACtC,IAAI,CAACA,aAAa,KAAKL,OAAO,CAACgC,WAAW,EAAE;MAC9C,OAAO,IAAI,CAAC3B,aAAa;;IAG3B;IACA,IAAID,aAAa,CAAC,IAAI,CAACC,aAAa,CAAC,IAAI,IAAI,CAACA,aAAa,CAACa,MAAM,GAAG,CAAC,EAAE;MACtE,OAAO,IAAI,CAACb,aAAa,CAACmL,MAAM,CAC5B,UAACC,QAAQ,EAAEvD,YAAY;QAAK,OAAAoD,IAAI,CAACI,GAAG,CAACD,QAAQ,EAAEvD,YAAY,CAAC;MAAhC,CAAgC,CAAC;;IAGnE;IACA,OAAO,CAAC;EACV,CAAC;EAEO9G,iBAAA,CAAA+C,SAAA,CAAA6B,YAAY,GAApB,UAAqBF,KAAmB,EAAE6F,gBAAgC;IAA1E,IAAAnK,KAAA;IAA0C,IAAAmK,gBAAA;MAAAA,gBAAA,OAAgC;IAAA;IACxE,IAAI7F,KAAK,YAAYxF,KAAK,EAAE;MAC1B,IAAI,CAAC,IAAI,CAAC+B,cAAc,IAAIsJ,gBAAgB,EAAE;QAC5C,MAAM,IAAIC,KAAK,CACX,6EAA6E,CAAC;;MAGpF,IAAI9F,KAAK,CAAC5E,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,IAAI;OACZ,MAAM;QACL,OAAO4E,KAAK,CAAC+F,IAAI,CAAC,UAAC1G,CAAC;UAAK,OAAA3D,KAAI,CAACsK,cAAc,CAAC3G,CAAC,CAAC;QAAtB,CAAsB,CAAC;;KAEnD,MAAM,IAAI,OAAOW,KAAK,KAAK,QAAQ,EAAE;MACpC,IAAI,IAAI,CAACzD,cAAc,IAAIsJ,gBAAgB,EAAE;QAC3C,MAAM,IAAIC,KAAK,CACX,wFACI9F,KAAO,CAAC;;MAElB,OAAO,IAAI,CAACgG,cAAc,CAAChG,KAAK,CAAC,IAC7B,IAAI,CAAChE,qBAAqB,IAAIgE,KAAK,KAAK9F,OAAO,CAACgC,WAAW;KAChE,MAAM;MACL,OAAO,KAAK;;EAEhB,CAAC;EAEOZ,iBAAA,CAAA+C,SAAA,CAAA2H,cAAc,GAAtB,UAAuBhG,KAAa;IAClC,IAAMiG,QAAQ,GAAG,IAAI,CAACxK,OAAO,CAAC8B,gBAAgB,EAAE;IAChD,OAAOyC,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGiG,QAAQ;EACvC,CAAC;EAED;;;;;;;;;;EAUQ3K,iBAAA,CAAA+C,SAAA,CAAA2D,wBAAwB,GAAhC,UACIhC,KAAa,EAAE8C,iCAA0C;IAC3D,IAAI,CAACrG,iBAAiB,GAAGuD,KAAK;IAC9B,IAAI,IAAI,CAACzD,cAAc,EAAE;MACvB,IAAI,CAAC2J,qBAAqB,CAAClG,KAAK,EAAE8C,iCAAiC,CAAC;MACpE,IAAI,CAACrH,OAAO,CAACsC,qBAAqB,CAAC,CAACiC,KAAK,CAAC,CAAC;KAC5C,MAAM;MACL,IAAI,CAACD,gBAAgB,CAACC,KAAK,EAAE;QAAC8D,iBAAiB,EAAE;MAAI,CAAC,CAAC;;EAE3D,CAAC;EAEOxI,iBAAA,CAAA+C,SAAA,CAAA6H,qBAAqB,GAA7B,UACIlG,KAAa,EAAE8C,iCAA0C;IAC3D,IAAMwB,kBAAkB,GAAG,IAAI,CAACF,qBAAqB,EAAE;IACvD,IAAM+B,gBAAgB,GAAG,IAAI,CAAC1K,OAAO,CAACiC,wBAAwB,CAACsC,KAAK,CAAC;IAErE;IACA;IACA;IACA;IACA,IAAIoG,eAAe;IACnB,IAAItD,iCAAiC,EAAE;MACrCsD,eAAe,GAAGD,gBAAgB;KACnC,MAAM;MACLC,eAAe,GAAG,CAACD,gBAAgB;MACnC,IAAI,CAAC1K,OAAO,CAACyC,gCAAgC,CAAC8B,KAAK,EAAEoG,eAAe,CAAC;;IAGvE,IAAI,CAAC3K,OAAO,CAACwC,2BAA2B,CACpC+B,KAAK,EAAEsE,kBAAkB,EAAE8B,eAAe,GAAG,MAAM,GAAG,OAAO,CAAC;IAElE;IACA;IACA,IAAIC,eAAe,GAAG,IAAI,CAAC9L,aAAa,KAAKL,OAAO,CAACgC,WAAW,GAC5D,EAAE,GACD,IAAI,CAAC3B,aAA0B,CAAC+L,KAAK,EAAE;IAE5C,IAAIF,eAAe,EAAE;MACnBC,eAAe,CAACzB,IAAI,CAAC5E,KAAK,CAAC;KAC5B,MAAM;MACLqG,eAAe,GAAGA,eAAe,CAACvL,MAAM,CAAC,UAACuE,CAAC;QAAK,OAAAA,CAAC,KAAKW,KAAK;MAAX,CAAW,CAAC;;IAG9D,IAAI,CAACzF,aAAa,GAAG8L,eAAe;EACtC,CAAC;EAEO/K,iBAAA,CAAA+C,SAAA,CAAAjB,gBAAgB,GAAxB,UAAyB4C,KAAa;IACpC,IAAI,CAACvE,OAAO,CAAC2B,gBAAgB,CAAC4C,KAAK,CAAC;IACpC,IAAI,CAAC7D,gBAAgB,GAAG6D,KAAK;EAC/B,CAAC;EAEO1E,iBAAA,CAAA+C,SAAA,CAAAmE,qBAAqB,GAA7B,UACI+D,wBAAkC,EAAEzC,iBAA0B;IAChE,IAAMf,KAAK,GAAG,IAAI,CAACtH,OAAO,CAAC8B,gBAAgB,EAAE;IAE7C;IACA,IAAIgJ,wBAAwB,CAACnL,MAAM,KAAK2H,KAAK,EAAE;MAC7C,IAAI,CAAC5C,kBAAkB,CAAC,EAAE,EAAE;QAAC2D,iBAAiB,EAAAA;MAAA,CAAC,CAAC;KACjD,MAAM;MACL;MACA,IAAM0C,UAAU,GAAa,EAAE;MAC/B,KAAK,IAAInH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0D,KAAK,EAAE1D,CAAC,EAAE,EAAE;QAC9B,IAAI,CAAC,IAAI,CAACsB,eAAe,CAACtB,CAAC,CAAC,IACxBkH,wBAAwB,CAAC5B,OAAO,CAACtF,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;UAC5CmH,UAAU,CAAC5B,IAAI,CAACvF,CAAC,CAAC;;;MAGtB,IAAI,CAACc,kBAAkB,CAACqG,UAAU,EAAE;QAAC1C,iBAAiB,EAAAA;MAAA,CAAC,CAAC;;EAE5D,CAAC;EAED;;;;;;;;;;;;;EAaAxI,iBAAA,CAAA+C,SAAA,CAAAoI,kBAAkB,GAAlB,UACIC,QAAgB,EAAEC,aAAsB,EAAEC,SAAiB;IAD/D,IAAAlL,KAAA;IAC8C,IAAAkL,SAAA;MAAAA,SAAA,QAAiB;IAAA;IAC7D,IAAMC,IAAI,GAAqC;MAC7CzJ,gBAAgB,EAAE,SAAAA,CAAC4C,KAAK;QACtBtE,KAAI,CAAC0B,gBAAgB,CAAC4C,KAAK,CAAC;MAC9B,CAAC;MACD7D,gBAAgB,EAAEwK,aAAa,GAAGA,aAAa,GAAG,IAAI,CAACxK,gBAAgB;MACvEuK,QAAQ,EAAAA,QAAA;MACR7J,sBAAsB,EAAE,IAAI,CAACA,sBAAsB;MACnD+J,SAAS,EAAAA,SAAA;MACTzE,qBAAqB,EAAE,SAAAA,CAACnC,KAAK;QAAK,OAAAtE,KAAI,CAACiF,eAAe,CAACX,KAAK,CAAC;MAA3B;KACnC;IACD,OAAO3F,SAAS,CAACyM,SAAS,CAACD,IAAI,EAAE,IAAI,CAAClK,cAAc,CAAC;EACvD,CAAC;EAED;;;;;;EAMQrB,iBAAA,CAAA+C,SAAA,CAAAG,wBAAwB,GAAhC;IACE,OAAOnE,SAAS,CAAC0M,eAAe,CAC5B,IAAI,CAACtL,OAAO,CAAC8B,gBAAgB,EAAE,EAAE,IAAI,CAAC9B,OAAO,CAAC2C,qBAAqB,CAAC;EAC1E,CAAC;EAED;;;EAGA9C,iBAAA,CAAA+C,SAAA,CAAA2I,oBAAoB,GAApB;IACE3M,SAAS,CAAC4M,WAAW,CAAC,IAAI,CAACtK,cAAc,CAAC;EAC5C,CAAC;EACH,OAAArB,iBAAC;AAAD,CAAC,CAr7BsCvB,aAAa;;AAu7BpD;AACA,eAAeuB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}